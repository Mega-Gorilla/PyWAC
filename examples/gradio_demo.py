"""
PyPAC ÂÆåÂÖ®Ê©üËÉΩ„Éá„É¢„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÔºàÊó•Êú¨Ë™ûÁâàÔºâ
„Åô„Åπ„Å¶„ÅÆPyPACÊ©üËÉΩ„ÇíË©¶„Åõ„ÇãÁµ±Âêà„Éá„É¢
"""

import gradio as gr
import pypac
import numpy as np
import wave
import io
import time
import os
import json
from datetime import datetime
from pathlib import Path
import threading
from typing import Optional, List, Dict, Any

class PyPACDemoApp:
    """PyPAC„ÅÆ„Åô„Åπ„Å¶„ÅÆÊ©üËÉΩ„ÇíÁµ±Âêà„Åó„Åü„Éá„É¢„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥"""
    
    def __init__(self):
        self.is_recording = False
        self.recording_thread = None
        self.audio_buffer = []
        self.sample_rate = 48000
        self.recording_filename = None
        self.recording_status = "ÂæÖÊ©ü‰∏≠"
        self.callback_messages = []
        self.monitoring_active = False
        
        # recordings„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
        self.recordings_dir = Path(__file__).parent / "recordings"
        self.recordings_dir.mkdir(parents=True, exist_ok=True)
    
    # ===== „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜÊ©üËÉΩ =====
    
    def get_sessions_table(self) -> str:
        """HTML„ÉÜ„Éº„Éñ„É´ÂΩ¢Âºè„Åß„Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíË°®Á§∫"""
        try:
            sessions = pypac.list_audio_sessions()
            if not sessions:
                return "<p style='color: gray; text-align: center;'>Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>"
            
            # HTML„ÉÜ„Éº„Éñ„É´„ÇíÊßãÁØâÔºà„ÉÄ„Éº„ÇØ„ÉÜ„Éº„ÉûÂØæÂøúÔºâ
            html = """
            <style>
                .pypac-session-table {
                    width: 100%;
                    border-collapse: separate;
                    border-spacing: 0;
                    font-family: 'Segoe UI', Arial, sans-serif;
                    background-color: rgba(30, 30, 46, 0.5);
                    border-radius: 8px;
                    overflow: hidden;
                    border: 1px solid rgba(255, 255, 255, 0.1);
                }
                .pypac-session-table th {
                    background-color: rgba(45, 45, 68, 0.8);
                    color: #e0e0e0;
                    padding: 12px 15px;
                    text-align: left;
                    font-weight: 600;
                    font-size: 14px;
                    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                }
                .pypac-quick-controls {
                    display: flex;
                    gap: 8px;
                    align-items: center;
                }
                .pypac-control-btn {
                    background-color: rgba(255, 255, 255, 0.1);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    border-radius: 4px;
                    padding: 4px 8px;
                    color: #e0e0e0;
                    cursor: pointer;
                    font-size: 12px;
                    transition: all 0.2s;
                }
                .pypac-control-btn:hover {
                    background-color: rgba(76, 175, 80, 0.3);
                    border-color: #4caf50;
                }
                .pypac-session-table td {
                    padding: 10px 15px;
                    color: #ffffff;
                    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
                    background-color: rgba(30, 30, 46, 0.3);
                }
                .pypac-session-table tr:hover td {
                    background-color: rgba(76, 175, 80, 0.1);
                }
                .pypac-active-row td {
                    background-color: rgba(76, 175, 80, 0.15);
                }
                .pypac-volume-bar {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }
                .pypac-volume-bg {
                    width: 120px;
                    height: 8px;
                    background-color: rgba(255, 255, 255, 0.1);
                    border-radius: 4px;
                    overflow: hidden;
                }
                .pypac-volume-fill {
                    height: 100%;
                    background: linear-gradient(90deg, #4caf50, #66bb6a);
                    transition: width 0.3s ease;
                }
                .pypac-status-icon {
                    font-size: 18px;
                }
                .pypac-process-name {
                    font-weight: 500;
                    color: #ffffff;
                }
            </style>
            <table class='pypac-session-table'>
                <thead>
                    <tr>
                        <th style='width: 60px; text-align: center;'>Áä∂ÊÖã</th>
                        <th style='min-width: 200px;'>„Éó„É≠„Çª„ÇπÂêç</th>
                        <th style='width: 100px;'>PID</th>
                        <th style='width: 200px;'>Èü≥Èáè</th>
                        <th style='width: 80px; text-align: center;'>„Éü„É•„Éº„Éà</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for session in sessions:
                # Áä∂ÊÖã„Ç¢„Ç§„Ç≥„É≥
                if session.get('is_active', False):
                    status_icon = "üîä"
                    row_class = "pypac-active-row"
                else:
                    status_icon = "‚è∏Ô∏è"
                    row_class = ""
                
                # „Éü„É•„Éº„ÉàÁä∂ÊÖã
                mute_status = "üîá" if session.get('is_muted', False) else "üîä"
                
                # Èü≥Èáè
                volume = session.get('volume', session.get('volume_percent', 0))
                if volume <= 1:
                    volume = volume * 100
                
                # „Éó„É≠„Çª„ÇπÂêç„ÇíÂèñÂæóÔºà„Ç®„É©„ÉºÂá¶ÁêÜ„ÇíÂº∑ÂåñÔºâ
                process_name = session.get('process_name', session.get('name', ''))
                if not process_name or process_name == 'None' or process_name == '':
                    # executableÂêç„ÇíË©¶„Åô
                    process_name = session.get('executable', 'Unknown Process')
                    if process_name and '\\' in process_name:
                        process_name = process_name.split('\\')[-1]
                    elif process_name and '/' in process_name:
                        process_name = process_name.split('/')[-1]
                
                # Èü≥Èáè„Éê„Éº
                volume_bar = f"""
                <div class='pypac-volume-bar'>
                    <div class='pypac-volume-bg'>
                        <div class='pypac-volume-fill' style='width: {volume:.0f}%;'></div>
                    </div>
                    <span style='color: #e0e0e0; font-size: 14px;'>{volume:.0f}%</span>
                </div>
                """
                
                html += f"""
                <tr class='{row_class}'>
                    <td style='text-align: center;'><span class='pypac-status-icon'>{status_icon}</span></td>
                    <td><span class='pypac-process-name'>{process_name}</span></td>
                    <td style='color: #e0e0e0;'>{session.get('process_id', 'N/A')}</td>
                    <td>{volume_bar}</td>
                    <td style='text-align: center;'><span class='pypac-status-icon'>{mute_status}</span></td>
                </tr>
                """
            
            html += """
                </tbody>
            </table>
            """
            
            return html
        except Exception as e:
            return f"<p style='color: red;'>„Ç®„É©„Éº: {str(e)}</p>"
    
    def get_session_stats(self) -> str:
        """„Çª„ÉÉ„Ç∑„Éß„É≥Áµ±Ë®àÊÉÖÂ†±„ÇíË°®Á§∫"""
        try:
            sessions = pypac.list_audio_sessions()
            active_sessions = pypac.get_active_sessions()
            
            total = len(sessions)
            active = len(active_sessions)
            inactive = total - active
            
            # „Éü„É•„Éº„Éà‰∏≠„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥Êï∞„Çí„Ç´„Ç¶„É≥„Éà
            muted = sum(1 for s in sessions if s.get('is_muted', False))
            
            stats = f"""
<div style='background-color: rgba(30, 30, 46, 0.5); padding: 15px; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.1);'>
    <div style='color: #e0e0e0; font-size: 16px; font-weight: 600; margin-bottom: 15px;'>üìä „Çª„ÉÉ„Ç∑„Éß„É≥Áµ±Ë®à</div>
    
    <div style='display: grid; gap: 10px;'>
        <div style='display: flex; justify-content: space-between; padding: 8px; background-color: rgba(255, 255, 255, 0.05); border-radius: 4px;'>
            <span style='color: #b0b0b0;'>Á∑è„Çª„ÉÉ„Ç∑„Éß„É≥Êï∞:</span>
            <span style='color: #ffffff; font-weight: 600;'>{total}</span>
        </div>
        
        <div style='display: flex; justify-content: space-between; padding: 8px; background-color: rgba(76, 175, 80, 0.15); border-radius: 4px;'>
            <span style='color: #b0b0b0;'>üîä „Ç¢„ÇØ„ÉÜ„Ç£„Éñ:</span>
            <span style='color: #4caf50; font-weight: 600;'>{active}</span>
        </div>
        
        <div style='display: flex; justify-content: space-between; padding: 8px; background-color: rgba(255, 255, 255, 0.05); border-radius: 4px;'>
            <span style='color: #b0b0b0;'>‚è∏Ô∏è Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ:</span>
            <span style='color: #ffffff; font-weight: 600;'>{inactive}</span>
        </div>
        
        <div style='display: flex; justify-content: space-between; padding: 8px; background-color: rgba(255, 152, 0, 0.15); border-radius: 4px;'>
            <span style='color: #b0b0b0;'>üîá „Éü„É•„Éº„Éà‰∏≠:</span>
            <span style='color: #ff9800; font-weight: 600;'>{muted}</span>
        </div>
    </div>
    
    <div style='margin-top: 15px; padding-top: 15px; border-top: 1px solid rgba(255, 255, 255, 0.1);'>
        <div style='color: #808080; font-size: 12px; text-align: center;'>
            ÊúÄÁµÇÊõ¥Êñ∞: {datetime.now().strftime("%H:%M:%S")}
        </div>
    </div>
</div>
            """
            
            return stats
        except Exception as e:
            return f"<div style='color: #ff5252;'>„Ç®„É©„Éº: {str(e)}</div>"
    
    def get_audio_sessions(self) -> List[str]:
        """Âà©Áî®ÂèØËÉΩ„Å™Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó"""
        try:
            sessions = pypac.list_audio_sessions()
            if not sessions:
                return ["Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"]
            
            session_list = []
            for session in sessions:
                status = "ÂÜçÁîü‰∏≠" if session.get('is_active', False) else "ÂÅúÊ≠¢‰∏≠"
                volume = session.get('volume', session.get('volume_percent', 0))
                if volume <= 1:
                    volume = volume * 100
                process_name = session.get('process_name', session.get('name', 'Unknown'))
                pid = session.get('process_id', session.get('pid', 0))
                session_str = f"{process_name} (PID: {pid}) - {status} - Èü≥Èáè: {volume:.0f}%"
                session_list.append(session_str)
            return session_list
        except Exception as e:
            return [f"„Ç®„É©„Éº: {str(e)}"]
    
    def get_session_details_html(self, session_name: str) -> tuple:
        """„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíHTMLÂΩ¢Âºè„ÅßÂèñÂæóÔºàÈü≥ÈáèÂà∂Âæ°‰ªò„ÅçÔºâ"""
        if not session_name or session_name == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "<p style='color: gray; text-align: center;'>„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>", gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)
        
        try:
            app_name = session_name.split(" (PID:")[0]
            session = pypac.find_audio_session(app_name)
            
            if session:
                # Áä∂ÊÖã„Ç¢„Ç§„Ç≥„É≥„Å®Ëâ≤
                if session.get('is_active', False):
                    status_color = "#4caf50"
                    status_text = "„Ç¢„ÇØ„ÉÜ„Ç£„Éñ"
                    status_icon = "üîä"
                else:
                    status_color = "#ff9800"
                    status_text = "Èùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ"
                    status_icon = "‚è∏Ô∏è"
                
                # „Éü„É•„Éº„ÉàÁä∂ÊÖã
                is_muted = session.get('is_muted', False)
                mute_icon = "üîá" if is_muted else "üîä"
                mute_text = "„Éü„É•„Éº„Éà‰∏≠" if is_muted else "„Éü„É•„Éº„ÉàËß£Èô§"
                
                # Èü≥Èáè
                volume = session.get('volume_percent', 0)
                
                # HTMLÊßãÁØâÔºà„ÉÄ„Éº„ÇØ„ÉÜ„Éº„ÉûÂØæÂøúÔºâ
                html = f"""
                <div style='background-color: rgba(30, 30, 46, 0.5); padding: 20px; border-radius: 10px; border: 1px solid rgba(255, 255, 255, 0.1);'>
                    <h3 style='margin-top: 0; color: #ffffff; display: flex; align-items: center; gap: 10px;'>
                        <span style='font-size: 28px;'>{status_icon}</span>
                        <span>{session.get('process_name', 'Unknown')}</span>
                    </h3>
                    
                    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 20px;'>
                        <div style='background-color: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;'>
                            <p style='margin: 0; color: #b0b0b0; font-size: 12px;'>„Éó„É≠„Çª„ÇπID</p>
                            <p style='margin: 5px 0; font-size: 20px; font-weight: bold; color: #ffffff;'>{session.get('process_id', 'N/A')}</p>
                        </div>
                        
                        <div style='background-color: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;'>
                            <p style='margin: 0; color: #b0b0b0; font-size: 12px;'>Áä∂ÊÖã</p>
                            <p style='margin: 5px 0; font-size: 20px; font-weight: bold; color: {status_color};'>{status_text}</p>
                        </div>
                    </div>
                    
                    <div style='background-color: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px; margin-top: 15px;'>
                        <p style='margin: 0; color: #b0b0b0; font-size: 12px;'>ÁèæÂú®„ÅÆÈü≥Èáè</p>
                        <div style='display: flex; align-items: center; margin-top: 10px;'>
                            <div style='flex: 1; height: 30px; background-color: rgba(255, 255, 255, 0.1); border-radius: 15px; margin-right: 15px; position: relative;'>
                                <div style='width: {volume:.0f}%; height: 100%; background: linear-gradient(90deg, #4caf50, #66bb6a); border-radius: 15px;'></div>
                                <span style='position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); font-weight: bold; color: #ffffff; text-shadow: 0 0 4px rgba(0,0,0,0.5);'>{volume:.0f}%</span>
                            </div>
                            <span style='font-size: 24px;'>{mute_icon}</span>
                        </div>
                    </div>
                    
                    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;'>
                        <div style='background-color: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;'>
                            <p style='margin: 0; color: #b0b0b0; font-size: 12px;'>„Éü„É•„Éº„ÉàÁä∂ÊÖã</p>
                            <p style='margin: 5px 0; font-size: 16px; font-weight: bold; color: #ffffff;'>{mute_text}</p>
                        </div>
                        
                        <div style='background-color: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 8px;'>
                            <p style='margin: 0; color: #b0b0b0; font-size: 12px;'>„Éá„Éê„Ç§„Çπ</p>
                            <p style='margin: 5px 0; font-size: 16px; font-weight: bold; color: #ffffff;'>{session.get('device_name', '„Éá„Éï„Ç©„É´„Éà')}</p>
                        </div>
                    </div>
                </div>
                """
                
                # Èü≥ÈáèÂà∂Âæ°„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆË°®Á§∫Áä∂ÊÖã„ÇíËøî„Åô
                return html, gr.update(visible=True, value=volume), gr.update(visible=True, variant="stop" if is_muted else "primary"), gr.update(visible=True, variant="primary" if is_muted else "stop"), gr.update(visible=True)
            else:
                return f"<p style='color: #ff5252;'>„Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü: {app_name}</p>", gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)
        except Exception as e:
            return f"<p style='color: #ff5252;'>„Ç®„É©„Éº: {str(e)}</p>", gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)
    
    def get_active_sessions(self) -> str:
        """„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíÂèñÂæó"""
        try:
            active_sessions = pypac.get_active_sessions()
            if not active_sessions:
                return "„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"
            
            result = "### „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥\n\n"
            for session in active_sessions:
                result += f"- **{session['process_name']}** (PID: {session['process_id']})\n"
            return result
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def get_recordable_processes(self) -> List[str]:
        """Èå≤Èü≥ÂèØËÉΩ„Å™„Éó„É≠„Çª„Çπ‰∏ÄË¶ß„ÇíÂèñÂæó"""
        try:
            processes = pypac.list_recordable_processes()
            if not processes:
                return ["Èå≤Èü≥ÂèØËÉΩ„Å™„Éó„É≠„Çª„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"]
            
            process_list = []
            for proc in processes:
                name = proc.get('name', 'Unknown')
                pid = proc.get('pid', 0)
                process_list.append(f"{name} (PID: {pid})")
            return process_list
        except Exception as e:
            return [f"„Ç®„É©„Éº: {str(e)}"]
    
    # ===== Èå≤Èü≥Ê©üËÉΩ =====
    
    def start_system_recording(self, duration: int):
        """„Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÈü≥Â£∞„ÇíÈå≤Èü≥"""
        if self.is_recording:
            return "„Åô„Åß„Å´Èå≤Èü≥‰∏≠„Åß„Åô", None
        
        try:
            self.is_recording = True
            self.audio_buffer = []
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = str(self.recordings_dir / f"system_{timestamp}.wav")
            
            self.recording_thread = threading.Thread(
                target=self._record_system_audio,
                args=(filename, duration)
            )
            self.recording_thread.start()
            
            return f"„Ç∑„Çπ„ÉÜ„É†Èü≥Â£∞„ÅÆÈå≤Èü≥„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºà{duration}ÁßíÈñìÔºâ", None
        except Exception as e:
            self.is_recording = False
            return f"Èå≤Èü≥ÈñãÂßã„Ç®„É©„Éº: {str(e)}", None
    
    def _record_system_audio(self, filename: str, duration: int):
        """„Ç∑„Çπ„ÉÜ„É†Èü≥Â£∞„ÇíÈå≤Èü≥Ôºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÔºâ"""
        try:
            audio_data = pypac.record_audio(duration)
            if audio_data is not None and len(audio_data) > 0:
                # Fix argument order: audio_data first, then filename
                pypac.save_to_wav(audio_data, filename, 48000)
                # Convert to numpy array and then to int16
                audio_array = np.array(audio_data, dtype=np.float32)
                self.audio_buffer = (audio_array * 32767).astype(np.int16)
                self.recording_status = f"„Ç∑„Çπ„ÉÜ„É†Èü≥Â£∞Èå≤Èü≥ÊàêÂäü: {filename}"
                self.recording_filename = filename
            else:
                self.recording_status = "Èå≤Èü≥„Éá„Éº„Çø„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü"
        except Exception as e:
            self.recording_status = f"Èå≤Èü≥„Ç®„É©„Éº: {str(e)}"
        finally:
            self.is_recording = False
    
    def start_process_recording(self, target_process: str, duration: int):
        """ÁâπÂÆö„Éó„É≠„Çª„Çπ„ÅÆÈü≥Â£∞„ÇíÈå≤Èü≥"""
        if self.is_recording:
            return "„Åô„Åß„Å´Èå≤Èü≥‰∏≠„Åß„Åô", None
        
        if not target_process or target_process == "Èå≤Èü≥ÂèØËÉΩ„Å™„Éó„É≠„Çª„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Éó„É≠„Çª„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ", None
        
        try:
            # „Éó„É≠„Çª„ÇπÂêç„Å®PID„ÇíÊäΩÂá∫
            parts = target_process.split(" (PID: ")
            process_name = parts[0]
            pid = int(parts[1].rstrip(")")) if len(parts) > 1 else 0
            
            self.is_recording = True
            self.audio_buffer = []
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = str(self.recordings_dir / f"process_{process_name.replace('.exe', '')}_{timestamp}.wav")
            
            self.recording_thread = threading.Thread(
                target=self._record_process_audio,
                args=(process_name, pid, filename, duration)
            )
            self.recording_thread.start()
            
            return f"{process_name}„ÅÆÈå≤Èü≥„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºà{duration}ÁßíÈñìÔºâ", None
        except Exception as e:
            self.is_recording = False
            return f"Èå≤Èü≥ÈñãÂßã„Ç®„É©„Éº: {str(e)}", None
    
    def _record_process_audio(self, process_name: str, pid: int, filename: str, duration: int):
        """„Éó„É≠„Çª„ÇπÈü≥Â£∞„ÇíÈå≤Èü≥Ôºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÔºâ"""
        try:
            # PID„ÅßÈå≤Èü≥„ÇíË©¶„Åø„Çã
            if pid > 0:
                success = pypac.record_process_id(pid, filename, duration)
            else:
                success = pypac.record_process(process_name, filename, duration)
            
            if success:
                self.recording_status = f"„Éó„É≠„Çª„ÇπÈå≤Èü≥ÊàêÂäü: {process_name}"
                self.recording_filename = filename
                
                # WAV„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
                if os.path.exists(filename):
                    with wave.open(filename, 'rb') as wf:
                        frames = wf.readframes(wf.getnframes())
                        nchannels = wf.getnchannels()
                        self.audio_buffer = np.frombuffer(frames, dtype=np.int16)
                        if nchannels == 2:
                            self.audio_buffer = self.audio_buffer.reshape(-1, 2)
                        self.sample_rate = wf.getframerate()
            else:
                self.recording_status = f"„Éó„É≠„Çª„ÇπÈå≤Èü≥Â§±Êïó: {process_name}"
        except Exception as e:
            self.recording_status = f"Èå≤Èü≥„Ç®„É©„Éº: {str(e)}"
        finally:
            self.is_recording = False
    
    def start_callback_recording(self, duration: int, monitor: bool):
        """„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥Ôºà„É¢„Éã„Çø„É™„É≥„Ç∞‰ªò„ÅçÔºâ"""
        if self.is_recording:
            return "„Åô„Åß„Å´Èå≤Èü≥‰∏≠„Åß„Åô", None, ""
        
        try:
            self.is_recording = True
            self.audio_buffer = []
            self.callback_messages = []
            self.monitoring_active = monitor
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = str(self.recordings_dir / f"callback_{timestamp}.wav")
            
            self.recording_thread = threading.Thread(
                target=self._record_with_callback,
                args=(filename, duration)
            )
            self.recording_thread.start()
            
            status = f"„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºà{duration}ÁßíÈñìÔºâ"
            if monitor:
                status += "\n„É¢„Éã„Çø„É™„É≥„Ç∞‰∏≠..."
            
            return status, None, ""
        except Exception as e:
            self.is_recording = False
            return f"Èå≤Èü≥ÈñãÂßã„Ç®„É©„Éº: {str(e)}", None, ""
    
    def _audio_callback(self, audio_chunk: np.ndarray, chunk_index: int):
        """Èü≥Â£∞„ÉÅ„É£„É≥„ÇØ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ"""
        if self.monitoring_active:
            # Èü≥Â£∞„É¨„Éô„É´Ë®àÁÆó
            rms = np.sqrt(np.mean(audio_chunk ** 2))
            db = 20 * np.log10(rms + 1e-10)
            
            # „É°„ÉÉ„Çª„Éº„Ç∏ËøΩÂä†
            msg = f"„ÉÅ„É£„É≥„ÇØ {chunk_index}: {len(audio_chunk)} „Çµ„É≥„Éó„É´, {db:.1f} dB"
            self.callback_messages.append(msg)
            
            # ÊúÄÊñ∞10‰ª∂„ÅÆ„Åø‰øùÊåÅ
            if len(self.callback_messages) > 10:
                self.callback_messages = self.callback_messages[-10:]
        
        # „Éê„ÉÉ„Éï„Ç°„Å´ËøΩÂä†
        self.audio_buffer.extend(audio_chunk.tolist())
    
    def _record_with_callback(self, filename: str, duration: int):
        """„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„ÅçÈå≤Èü≥Ôºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÔºâ"""
        try:
            # „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥ÂÆüË°å
            success = pypac.record_with_callback(
                duration=duration,
                callback=self._audio_callback,
                filename=filename
            )
            
            if success:
                self.recording_status = f"„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥ÊàêÂäü: {filename}"
                self.recording_filename = filename
                
                # NumPyÈÖçÂàó„Å´Â§âÊèõ
                if len(self.audio_buffer) > 0:
                    self.audio_buffer = np.array(self.audio_buffer, dtype=np.float32)
            else:
                self.recording_status = "„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥Â§±Êïó"
        except Exception as e:
            self.recording_status = f"Èå≤Èü≥„Ç®„É©„Éº: {str(e)}"
        finally:
            self.is_recording = False
            self.monitoring_active = False
    
    def stop_recording(self):
        """Èå≤Èü≥„ÇíÂÅúÊ≠¢"""
        if not self.is_recording and self.recording_thread and self.recording_thread.is_alive():
            self.recording_thread.join(timeout=2)
        
        if not self.is_recording and len(self.audio_buffer) == 0:
            return "Èå≤Èü≥„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì", None
        
        # Èå≤Èü≥„ÇíÂº∑Âà∂ÂÅúÊ≠¢
        self.is_recording = False
        if self.recording_thread and self.recording_thread.is_alive():
            self.recording_thread.join(timeout=1)
        
        if len(self.audio_buffer) == 0:
            return f"Èå≤Èü≥„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì (Áä∂ÊÖã: {self.recording_status})", None
        
        # audio_buffer„Ååfloat32„ÅÆÂ†¥Âêà„ÅØint16„Å´Â§âÊèõ
        if self.audio_buffer.dtype == np.float32:
            audio_output = (self.audio_buffer * 32767).astype(np.int16)
        else:
            audio_output = self.audio_buffer
        
        # 2Ê¨°ÂÖÉÈÖçÂàó„Å´Â§âÊèõÔºà„Çπ„ÉÜ„É¨„Ç™Ôºâ
        if len(audio_output.shape) == 1:
            # „É¢„Éé„É©„É´„Çí„Çπ„ÉÜ„É¨„Ç™„Å´Â§âÊèõ
            audio_output = np.column_stack((audio_output, audio_output))
        
        return f"Èå≤Èü≥„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü\n{self.recording_status}", (self.sample_rate, audio_output)
    
    def get_monitoring_status(self) -> str:
        """„É¢„Éã„Çø„É™„É≥„Ç∞Áä∂Ê≥Å„ÇíÂèñÂæó"""
        if not self.monitoring_active:
            return "„É¢„Éã„Çø„É™„É≥„Ç∞ÂÅúÊ≠¢‰∏≠"
        
        if len(self.callback_messages) == 0:
            return "„É¢„Éã„Çø„É™„É≥„Ç∞‰∏≠..."
        
        return "\n".join(self.callback_messages)
    
    # ===== Èü≥ÈáèÂà∂Âæ°Ê©üËÉΩ =====
    
    def set_app_volume(self, target_app: str, volume: float):
        """„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈü≥Èáè„ÇíË®≠ÂÆö"""
        if not target_app or target_app == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            app_name = target_app.split(" (PID:")[0]
            pypac.set_app_volume(app_name, volume / 100.0)
            return f"{app_name}„ÅÆÈü≥Èáè„Çí{volume}%„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü"
        except Exception as e:
            return f"Èü≥ÈáèË®≠ÂÆö„Ç®„É©„Éº: {str(e)}"
    
    def get_app_volume(self, target_app: str) -> str:
        """„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÁèæÂú®„ÅÆÈü≥Èáè„ÇíÂèñÂæó"""
        if not target_app or target_app == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            app_name = target_app.split(" (PID:")[0]
            volume = pypac.get_app_volume(app_name)
            return f"{app_name}„ÅÆÁèæÂú®„ÅÆÈü≥Èáè: {volume * 100:.1f}%"
        except Exception as e:
            return f"Èü≥ÈáèÂèñÂæó„Ç®„É©„Éº: {str(e)}"
    
    def adjust_app_volume(self, target_app: str, delta: float):
        """„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈü≥Èáè„ÇíÁõ∏ÂØæÁöÑ„Å´Ë™øÊï¥"""
        if not target_app or target_app == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            app_name = target_app.split(" (PID:")[0]
            new_volume = pypac.adjust_volume(app_name, delta / 100.0)
            return f"{app_name}„ÅÆÈü≥Èáè„ÇíË™øÊï¥„Åó„Åæ„Åó„Åü: {new_volume * 100:.1f}%"
        except Exception as e:
            return f"Èü≥ÈáèË™øÊï¥„Ç®„É©„Éº: {str(e)}"
    
    def mute_app(self, target_app: str):
        """„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çí„Éü„É•„Éº„Éà"""
        if not target_app or target_app == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            app_name = target_app.split(" (PID:")[0]
            pypac.mute_app(app_name)
            return f"{app_name}„Çí„Éü„É•„Éº„Éà„Åó„Åæ„Åó„Åü"
        except Exception as e:
            return f"„Éü„É•„Éº„Éà„Ç®„É©„Éº: {str(e)}"
    
    def unmute_app(self, target_app: str):
        """„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„Éü„É•„Éº„Éà„ÇíËß£Èô§"""
        if not target_app or target_app == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            return "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            app_name = target_app.split(" (PID:")[0]
            pypac.unmute_app(app_name)
            return f"{app_name}„ÅÆ„Éü„É•„Éº„Éà„ÇíËß£Èô§„Åó„Åæ„Åó„Åü"
        except Exception as e:
            return f"„Éü„É•„Éº„ÉàËß£Èô§„Ç®„É©„Éº: {str(e)}"
    
    def list_recordings(self) -> List[str]:
        """Èå≤Èü≥„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÂèñÂæó"""
        try:
            recordings = []
            for file in self.recordings_dir.glob("*.wav"):
                size = file.stat().st_size / 1024
                mtime = datetime.fromtimestamp(file.stat().st_mtime)
                recordings.append(f"{file.name} ({size:.1f}KB) - {mtime.strftime('%Y-%m-%d %H:%M')}")
            
            if not recordings:
                return ["Èå≤Èü≥„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"]
            
            return sorted(recordings, reverse=True)
        except Exception as e:
            return [f"„Ç®„É©„Éº: {str(e)}"]

# „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
app = PyPACDemoApp()

# Gradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆ‰ΩúÊàê
with gr.Blocks(title="PyPACÂÆåÂÖ®Ê©üËÉΩ„Éá„É¢", theme=gr.themes.Soft(primary_hue="green", neutral_hue="slate")) as demo:
    gr.Markdown("""
    # üéôÔ∏è PyPAC ÂÆåÂÖ®Ê©üËÉΩ„Éá„É¢ÔºàÊó•Êú¨Ë™ûÁâàÔºâ
    
    Python Process Audio Capture - „Åô„Åπ„Å¶„ÅÆÊ©üËÉΩ„ÇíË©¶„Åõ„ÇãÁµ±Âêà„Éá„É¢
    """)
    
    # ===== „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Çø„Éñ =====
    with gr.Tab("„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ"):
        gr.Markdown("### üéµ Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ")
        
        # „Çø„Ç§„Éû„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÔºàËá™ÂãïÊõ¥Êñ∞Áî®Ôºâ
        session_timer = gr.Timer(value=5, active=False)
        
        with gr.Row():
            with gr.Column(scale=2):
                # „Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ßË°®Á§∫
                gr.Markdown("#### ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß")
                sessions_table = gr.HTML(
                    value=app.get_sessions_table(),
                    label="„Çª„ÉÉ„Ç∑„Éß„É≥‰∏ÄË¶ß"
                )
                
                with gr.Row():
                    refresh_sessions_btn = gr.Button("üîÑ Êõ¥Êñ∞", size="sm", scale=1)
                    auto_refresh = gr.Checkbox(label="Ëá™ÂãïÊõ¥Êñ∞Ôºà5ÁßíÔºâ", value=False, scale=1)
                
            with gr.Column(scale=1):
                # „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çª„ÉÉ„Ç∑„Éß„É≥Áµ±Ë®à
                session_stats = gr.HTML(app.get_session_stats())
        
        gr.Markdown("---")
        
        with gr.Row():
            with gr.Column(scale=1):
                # „Çª„ÉÉ„Ç∑„Éß„É≥ÈÅ∏Êäû
                gr.Markdown("#### „Çª„ÉÉ„Ç∑„Éß„É≥ÈÅ∏Êäû")
                session_dropdown = gr.Dropdown(
                    label="Ë©≥Á¥∞„ÇíË°®Á§∫„Åô„Çã„Çª„ÉÉ„Ç∑„Éß„É≥",
                    choices=app.get_audio_sessions(),
                    value=None,
                    interactive=True
                )
                
                get_details_btn = gr.Button("üìã Ë©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó", variant="primary")
                
            with gr.Column(scale=2):
                # ÈÅ∏Êäû„Åó„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆË©≥Á¥∞
                gr.Markdown("#### ÈÅ∏Êäû„Åó„Åü„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆË©≥Á¥∞")
                session_info = gr.HTML(
                    value="<p style='color: gray;'>„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>"
                )
        
        # Èü≥ÈáèÂà∂Âæ°UIÔºà„Çª„ÉÉ„Ç∑„Éß„É≥Ë©≥Á¥∞„ÅÆ‰∏ã„Å´ÈÖçÁΩÆÔºâ
        with gr.Row():
            with gr.Column(scale=2):
                volume_control_slider = gr.Slider(
                    0, 100, 50, 
                    step=1, 
                    label="Èü≥ÈáèË™øÊï¥",
                    visible=False,
                    interactive=True
                )
            with gr.Column(scale=1):
                with gr.Row():
                    mute_control_btn = gr.Button(
                        "üîá „Éü„É•„Éº„Éà",
                        variant="stop",
                        visible=False,
                        size="sm"
                    )
                    unmute_control_btn = gr.Button(
                        "üîä „Éü„É•„Éº„ÉàËß£Èô§",
                        variant="primary",
                        visible=False,
                        size="sm"
                    )
                apply_volume_btn = gr.Button(
                    "Èü≥Èáè„ÇíÈÅ©Áî®",
                    variant="primary",
                    visible=False
                )
    
    # ===== Èå≤Èü≥„Çø„Éñ =====
    with gr.Tab("Èå≤Èü≥"):
        with gr.Row():
            with gr.Column():
                gr.Markdown("### Èå≤Èü≥„É¢„Éº„ÉâÈÅ∏Êäû")
                
                with gr.Tab("„Ç∑„Çπ„ÉÜ„É†Èå≤Èü≥"):
                    system_duration = gr.Slider(1, 60, 10, step=1, label="Èå≤Èü≥ÊôÇÈñìÔºàÁßíÔºâ")
                    system_record_btn = gr.Button("üî¥ „Ç∑„Çπ„ÉÜ„É†Èå≤Èü≥ÈñãÂßã", variant="primary")
                
                with gr.Tab("„Éó„É≠„Çª„ÇπÈå≤Èü≥"):
                    process_dropdown = gr.Dropdown(
                        label="ÂØæË±°„Éó„É≠„Çª„Çπ",
                        choices=app.get_recordable_processes(),
                        value=None,
                        interactive=True
                    )
                    refresh_processes_btn = gr.Button("üîÑ „Éó„É≠„Çª„ÇπÊõ¥Êñ∞", size="sm")
                    process_duration = gr.Slider(1, 60, 10, step=1, label="Èå≤Èü≥ÊôÇÈñìÔºàÁßíÔºâ")
                    process_record_btn = gr.Button("üî¥ „Éó„É≠„Çª„ÇπÈå≤Èü≥ÈñãÂßã", variant="primary")
                
                with gr.Tab("„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥"):
                    callback_duration = gr.Slider(1, 60, 10, step=1, label="Èå≤Èü≥ÊôÇÈñìÔºàÁßíÔºâ")
                    enable_monitoring = gr.Checkbox(label="„É™„Ç¢„É´„Çø„Ç§„É†„É¢„Éã„Çø„É™„É≥„Ç∞", value=False)
                    callback_record_btn = gr.Button("üî¥ „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥ÈñãÂßã", variant="primary")
                    monitoring_output = gr.Textbox(
                        label="„É¢„Éã„Çø„É™„É≥„Ç∞Áä∂Ê≥ÅÔºàÊ≥®Ôºö„É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÅØÁèæÂú®ÁÑ°ÂäπÔºâ",
                        lines=5,
                        interactive=False
                    )
                
                stop_btn = gr.Button("‚èπÔ∏è Èå≤Èü≥ÂÅúÊ≠¢", variant="stop")
                
                record_status = gr.Textbox(
                    label="Èå≤Èü≥„Çπ„ÉÜ„Éº„Çø„Çπ",
                    value="ÂæÖÊ©ü‰∏≠",
                    interactive=False
                )
            
            with gr.Column():
                audio_output = gr.Audio(
                    label="Èå≤Èü≥ÁµêÊûú",
                    type="numpy"
                )
                
                recordings_list = gr.Dropdown(
                    label="Èå≤Èü≥Ê∏à„Åø„Éï„Ç°„Ç§„É´",
                    choices=app.list_recordings(),
                    interactive=True
                )
                refresh_recordings_btn = gr.Button("üîÑ Èå≤Èü≥„É™„Çπ„ÉàÊõ¥Êñ∞", size="sm")
    
    # ===== Èü≥ÈáèÂà∂Âæ°„Çø„Éñ =====
    with gr.Tab("Èü≥ÈáèÂà∂Âæ°"):
        with gr.Row():
            with gr.Column():
                volume_app_dropdown = gr.Dropdown(
                    label="ÂØæË±°„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥",
                    choices=app.get_audio_sessions(),
                    value=None,
                    interactive=True
                )
                
                refresh_volume_btn = gr.Button("üîÑ Êõ¥Êñ∞", size="sm")
                
                gr.Markdown("### Áµ∂ÂØæÈü≥ÈáèË®≠ÂÆö")
                volume_slider = gr.Slider(0, 100, 50, step=1, label="Èü≥ÈáèÔºà%Ôºâ")
                set_volume_btn = gr.Button("Èü≥Èáè„ÇíË®≠ÂÆö", variant="primary")
                
                gr.Markdown("### Áõ∏ÂØæÈü≥ÈáèË™øÊï¥")
                delta_slider = gr.Slider(-50, 50, 0, step=5, label="Ë™øÊï¥ÈáèÔºà%Ôºâ")
                adjust_volume_btn = gr.Button("Èü≥Èáè„ÇíË™øÊï¥")
                
                gr.Markdown("### „Éü„É•„Éº„ÉàÂà∂Âæ°")
                with gr.Row():
                    mute_btn = gr.Button("üîá „Éü„É•„Éº„Éà")
                    unmute_btn = gr.Button("üîä „Éü„É•„Éº„ÉàËß£Èô§")
                
                get_volume_btn = gr.Button("ÁèæÂú®„ÅÆÈü≥Èáè„ÇíÂèñÂæó")
                
            with gr.Column():
                volume_status = gr.Textbox(
                    label="„Çπ„ÉÜ„Éº„Çø„Çπ",
                    lines=3,
                    interactive=False
                )
    
    # ===== Process Loopback„Çø„Éñ =====
    with gr.Tab("Process Loopback"):
        gr.Markdown("""
        ### Windows Process Loopback API „ÉÜ„Çπ„Éà
        
        „Éó„É≠„Çª„ÇπÂõ∫Êúâ„ÅÆÈü≥Â£∞„Ç≠„É£„Éó„ÉÅ„É£Ê©üËÉΩ„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô„ÄÇ
        Windows 10 „Éê„Éº„Ç∏„Éß„É≥2004‰ª•Èôç„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ
        """)
        
        with gr.Row():
            with gr.Column():
                loopback_process = gr.Dropdown(
                    label="ÂØæË±°„Éó„É≠„Çª„Çπ",
                    choices=app.get_recordable_processes(),
                    interactive=True
                )
                refresh_loopback_btn = gr.Button("üîÑ „Éó„É≠„Çª„ÇπÊõ¥Êñ∞", size="sm")
                
                loopback_duration = gr.Slider(1, 30, 5, step=1, label="Èå≤Èü≥ÊôÇÈñìÔºàÁßíÔºâ")
                
                with gr.Row():
                    test_process_btn = gr.Button("„Éó„É≠„Çª„ÇπÈå≤Èü≥„ÉÜ„Çπ„Éà", variant="primary")
                    test_pid_btn = gr.Button("PIDÈå≤Èü≥„ÉÜ„Çπ„Éà")
                
                loopback_status = gr.Textbox(
                    label="„ÉÜ„Çπ„ÉàÁµêÊûú",
                    lines=5,
                    interactive=False
                )
            
            with gr.Column():
                loopback_audio = gr.Audio(
                    label="Èå≤Èü≥ÁµêÊûú",
                    type="numpy"
                )
    
    # ===== È´òÂ∫¶„Å™Ê©üËÉΩ„Çø„Éñ =====
    with gr.Tab("È´òÂ∫¶„Å™Ê©üËÉΩ"):
        with gr.Row():
            with gr.Column():
                gr.Markdown("### Direct Recording Functions")
                
                # record_to_file „Éá„É¢
                direct_duration = gr.Slider(1, 30, 5, step=1, label="Èå≤Èü≥ÊôÇÈñìÔºàÁßíÔºâ")
                direct_filename = gr.Textbox(label="Âá∫Âäõ„Éï„Ç°„Ç§„É´Âêç", value="direct_recording.wav")
                direct_record_btn = gr.Button("record_to_file() „ÇíÂÆüË°å", variant="primary")
                direct_status = gr.Textbox(label="„Çπ„ÉÜ„Éº„Çø„Çπ", interactive=False)
                
                gr.Markdown("### „ÇØ„É©„Çπ„ÅÆÁõ¥Êé•‰ΩøÁî®")
                
                # SessionManager „Éá„É¢
                use_session_manager_btn = gr.Button("SessionManager „Çí‰ΩøÁî®")
                session_manager_output = gr.Textbox(label="SessionManager Âá∫Âäõ", lines=5, interactive=False)
                
                # AudioRecorder „Éá„É¢
                use_audio_recorder_btn = gr.Button("AudioRecorder „Çí‰ΩøÁî®")
                audio_recorder_output = gr.Textbox(label="AudioRecorder Âá∫Âäõ", lines=5, interactive=False)
                
                gr.Markdown("### ÈùûÊé®Â•®Ê©üËÉΩ")
                test_deprecated_btn = gr.Button("ÈùûÊé®Â•®API „ÅÆ„ÉÜ„Çπ„Éà")
                deprecated_output = gr.Textbox(label="ÈùûÊé®Â•®API „ÅÆÁµêÊûú", lines=3, interactive=False)
            
            with gr.Column():
                gr.Markdown("### „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Ê©üËÉΩ")
                
                # WAV„Éï„Ç°„Ç§„É´Êìç‰Ωú
                wav_file_input = gr.File(label="WAV„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ", file_types=[".wav"])
                
                # load_wav „Éá„É¢
                load_wav_btn = gr.Button("load_wav() „ÇíÂÆüË°å")
                load_wav_output = gr.Textbox(label="WAVÊÉÖÂ†±", lines=3, interactive=False)
                
                # Èü≥Â£∞Ëß£Êûê
                gr.Markdown("### Èü≥Â£∞Ëß£Êûê„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£")
                calc_rms_btn = gr.Button("calculate_rms() „ÇíÂÆüË°å")
                calc_db_btn = gr.Button("calculate_db() „ÇíÂÆüË°å")
                normalize_btn = gr.Button("normalize_audio() „ÇíÂÆüË°å")
                analysis_output = gr.Textbox(label="Ëß£ÊûêÁµêÊûú", lines=5, interactive=False)
                
                # convert_float32_to_int16 „Éá„É¢
                gr.Markdown("### „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ")
                convert_btn = gr.Button("convert_float32_to_int16() „Éá„É¢")
                convert_output = gr.Textbox(label="Â§âÊèõÁµêÊûú", lines=3, interactive=False)
    
    # ===== „Éò„É´„Éó„Çø„Éñ =====
    with gr.Tab("„Éò„É´„Éó"):
        gr.Markdown("""
        ## üìñ PyPAC ÂÆåÂÖ®Ê©üËÉΩ„Ç¨„Ç§„Éâ
        
        ### üéØ ‰∏ªË¶ÅÊ©üËÉΩ
        
        #### 1. „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
        - **list_audio_sessions()**: „Åô„Åπ„Å¶„ÅÆÈü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂàóÊåô
        - **find_audio_session()**: ÁâπÂÆö„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊ§úÁ¥¢
        - **get_active_sessions()**: „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„ÅøÂèñÂæó
        - **list_recordable_processes()**: Èå≤Èü≥ÂèØËÉΩ„Å™„Éó„É≠„Çª„Çπ‰∏ÄË¶ß
        
        #### 2. Èå≤Èü≥Ê©üËÉΩ
        - **record_audio()**: „Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÈü≥Â£∞„ÇíÈå≤Èü≥
        - **record_process()**: „Éó„É≠„Çª„ÇπÂêç„ÅßÁâπÂÆö„Ç¢„Éó„É™„ÅÆÈü≥Â£∞„ÇíÈå≤Èü≥
        - **record_process_id()**: PID„ÅßÁâπÂÆö„Ç¢„Éó„É™„ÅÆÈü≥Â£∞„ÇíÈå≤Èü≥
        - **record_with_callback()**: „É™„Ç¢„É´„Çø„Ç§„É†„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„ÅçÈå≤Èü≥
        - **record_to_file()**: „Éï„Ç°„Ç§„É´„Å´Áõ¥Êé•Èå≤Èü≥
        
        #### 3. Èü≥ÈáèÂà∂Âæ°
        - **set_app_volume()**: „Ç¢„Éó„É™„ÅÆÈü≥Èáè„ÇíË®≠ÂÆöÔºà0.0-1.0Ôºâ
        - **get_app_volume()**: ÁèæÂú®„ÅÆÈü≥Èáè„ÇíÂèñÂæó
        - **adjust_volume()**: Áõ∏ÂØæÁöÑ„Å´Èü≥ÈáèË™øÊï¥
        - **mute_app()**: „Ç¢„Éó„É™„Çí„Éü„É•„Éº„Éà
        - **unmute_app()**: „Éü„É•„Éº„ÉàËß£Èô§
        
        #### 4. „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
        - **save_to_wav()**: NumPyÈÖçÂàó„ÇíWAV„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
        - **convert_float32_to_int16()**: Èü≥Â£∞„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ
        - **utils.calculate_db()**: Èü≥Èáè„É¨„Éô„É´Ë®àÁÆó
        
        ### üîß ÊäÄË°ì‰ªïÊßò
        
        - **ÂØæÂøúOS**: Windows 10 „Éê„Éº„Ç∏„Éß„É≥2004‰ª•Èôç
        - **Èü≥Â£∞„Éï„Ç©„Éº„Éû„ÉÉ„Éà**: 48kHz / 32bit float / „Çπ„ÉÜ„É¨„Ç™
        - **Process Loopback**: Windows Process Loopback API‰ΩøÁî®
        - **ÊúÄÂ§ßÈå≤Èü≥ÊôÇÈñì**: 60ÁßíÔºà„Éê„ÉÉ„Éï„Ç°„Çµ„Ç§„Ç∫Âà∂ÈôêÔºâ
        
        ### ‚ö†Ô∏è Ê≥®ÊÑè‰∫ãÈ†Ö
        
        - Process Loopback API„ÅØÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Å™Â†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô
        - ÂØæË±°„Éó„É≠„Çª„Çπ„ÅåÈü≥Â£∞„ÇíÂá∫Âäõ„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÁÑ°Èü≥„Å´„Å™„Çä„Åæ„Åô
        - ‰∏ÄÈÉ®„ÅÆDRM‰øùË≠∑„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØÈå≤Èü≥„Åß„Åç„Åæ„Åõ„Çì
        
        ### üêõ „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞
        
        **Q: „Éó„É≠„Çª„ÇπÈå≤Èü≥„ÅåÁÑ°Èü≥„Å´„Å™„Çã**
        - A: ÂØæË±°„Éó„É≠„Çª„Çπ„ÅåÈü≥Â£∞„ÇíÂá∫Âäõ„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
        - A: Windows 10 „Éê„Éº„Ç∏„Éß„É≥2004‰ª•Èôç„ÅãÁ¢∫Ë™ç
        - A: ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅßÂÆüË°å„Åó„Å¶„Åø„Çã
        
        **Q: „Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ**
        - A: WindowsÈü≥Â£∞„Éü„Ç≠„Çµ„Éº„Åß„Ç¢„Éó„É™„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
        - A: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂÜçËµ∑Âãï„Åó„Å¶„Åø„Çã
        
        **Q: Èå≤Èü≥„ÅåÈÄî‰∏≠„ÅßÂàá„Çå„Çã**
        - A: Èå≤Èü≥ÊôÇÈñì„ÇíÁü≠„Åè„Åó„Å¶„Åø„ÇãÔºàÊé®Â•®: 30Áßí‰ª•ÂÜÖÔºâ
        - A: „Ç∑„Çπ„ÉÜ„É†„É°„É¢„É™„ÅåÂçÅÂàÜ„ÅãÁ¢∫Ë™ç
        """)
    
    # ===== „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº =====
    
    # „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
    def refresh_sessions():
        sessions = app.get_audio_sessions()
        processes = app.get_recordable_processes()
        recordings = app.list_recordings()
        return {
            session_dropdown: gr.update(choices=sessions),
            volume_app_dropdown: gr.update(choices=sessions),
            process_dropdown: gr.update(choices=processes),
            loopback_process: gr.update(choices=processes),
            recordings_list: gr.update(choices=recordings)
        }
    
    # Èå≤Èü≥Ê©üËÉΩ
    def on_system_record(duration):
        status, audio = app.start_system_recording(duration)
        return status, audio
    
    def on_process_record(process, duration):
        status, audio = app.start_process_recording(process, duration)
        return status, audio
    
    def on_callback_record(duration, monitor):
        status, audio, monitoring = app.start_callback_recording(duration, monitor)
        return status, audio, monitoring
    
    def on_stop_recording():
        status, audio = app.stop_recording()
        return status, audio
    
    def update_monitoring():
        """„É¢„Éã„Çø„É™„É≥„Ç∞Áä∂Ê≥Å„ÇíÂÆöÊúüÊõ¥Êñ∞"""
        if app.monitoring_active:
            return app.get_monitoring_status()
        return gr.update()
    
    # Process Loopback„ÉÜ„Çπ„Éà
    def test_process_loopback(process, duration):
        if not process:
            return "„Éó„É≠„Çª„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ", None
        
        try:
            process_name = process.split(" (PID:")[0]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = str(app.recordings_dir / f"loopback_test_{timestamp}.wav")
            
            success = pypac.record_process(process_name, filename, duration)
            
            if success and os.path.exists(filename):
                with wave.open(filename, 'rb') as wf:
                    frames = wf.readframes(wf.getnframes())
                    audio_data = np.frombuffer(frames, dtype=np.int16)
                    sample_rate = wf.getframerate()
                    
                    if wf.getnchannels() == 2:
                        audio_data = audio_data.reshape(-1, 2)
                    else:
                        audio_data = np.column_stack((audio_data, audio_data))
                
                return f"Process LoopbackÊàêÂäü: {process_name}", (sample_rate, audio_data)
            else:
                return f"Process LoopbackÂ§±Êïó: {process_name}", None
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}", None
    
    def test_pid_loopback(process, duration):
        if not process:
            return "„Éó„É≠„Çª„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ", None
        
        try:
            parts = process.split(" (PID: ")
            if len(parts) < 2:
                return "PID„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì", None
            
            pid = int(parts[1].rstrip(")"))
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = str(app.recordings_dir / f"pid_test_{timestamp}.wav")
            
            success = pypac.record_process_id(pid, filename, duration)
            
            if success and os.path.exists(filename):
                with wave.open(filename, 'rb') as wf:
                    frames = wf.readframes(wf.getnframes())
                    audio_data = np.frombuffer(frames, dtype=np.int16)
                    sample_rate = wf.getframerate()
                    
                    if wf.getnchannels() == 2:
                        audio_data = audio_data.reshape(-1, 2)
                    else:
                        audio_data = np.column_stack((audio_data, audio_data))
                
                return f"PIDÈå≤Èü≥ÊàêÂäü: PID {pid}", (sample_rate, audio_data)
            else:
                return f"PIDÈå≤Èü≥Â§±Êïó: PID {pid}", None
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}", None
    
    # „Ç§„Éô„É≥„Éà„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞
    
    # „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÅÆÊõ¥Êñ∞Ê©üËÉΩ
    def update_session_display():
        """„Çª„ÉÉ„Ç∑„Éß„É≥Ë°®Á§∫„ÇíÊõ¥Êñ∞"""
        sessions = app.get_audio_sessions()
        return (
            app.get_sessions_table(),
            app.get_session_stats(),
            gr.update(choices=sessions),
            gr.update(choices=sessions)  # volume_app_dropdown„ÇÇÊõ¥Êñ∞
        )
    
    # Êõ¥Êñ∞„Éú„Çø„É≥
    refresh_sessions_btn.click(
        update_session_display,
        outputs=[sessions_table, session_stats, session_dropdown, volume_app_dropdown]
    )
    
    # Ëá™ÂãïÊõ¥Êñ∞„ÅÆÂà∂Âæ°
    def toggle_auto_refresh(enabled):
        """Ëá™ÂãïÊõ¥Êñ∞„ÅÆÊúâÂäπ/ÁÑ°Âäπ„ÇíÂàá„ÇäÊõø„Åà"""
        return gr.Timer(active=enabled)
    
    auto_refresh.change(
        toggle_auto_refresh,
        inputs=auto_refresh,
        outputs=session_timer
    )
    
    # „Çø„Ç§„Éû„Éº„Ç§„Éô„É≥„Éà„ÅßËá™ÂãïÊõ¥Êñ∞
    session_timer.tick(
        update_session_display,
        outputs=[sessions_table, session_stats, session_dropdown, volume_app_dropdown]
    )
    
    # „Åù„ÅÆ‰ªñ„ÅÆ„Éó„É≠„Çª„Çπ„É™„Çπ„ÉàÊõ¥Êñ∞
    refresh_sessions_btn.click(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])
    refresh_processes_btn.click(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])
    refresh_volume_btn.click(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])
    refresh_loopback_btn.click(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])
    refresh_recordings_btn.click(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])
    
    # „Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„Å®Èü≥ÈáèÂà∂Âæ°
    get_details_btn.click(
        app.get_session_details_html,
        inputs=session_dropdown,
        outputs=[session_info, volume_control_slider, mute_control_btn, unmute_control_btn, apply_volume_btn]
    )
    
    # Èü≥ÈáèÂà∂Âæ°„Ç§„Éô„É≥„Éà
    def apply_volume_from_slider(session_name, volume):
        if not session_name or session_name == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            empty_result = (
                "<p style='color: gray;'>„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>",
                gr.update(visible=False), gr.update(visible=False), 
                gr.update(visible=False), gr.update(visible=False)
            )
            return empty_result + (app.get_sessions_table(), app.get_session_stats())
        
        app_name = session_name.split(" (PID:")[0]
        result = app.set_app_volume(app_name, volume)
        
        # Ë©≥Á¥∞„Å®„ÉÜ„Éº„Éñ„É´„ÇíÂÜçÂèñÂæó„Åó„Å¶Êõ¥Êñ∞
        details_result = app.get_session_details_html(session_name)
        return details_result + (app.get_sessions_table(), app.get_session_stats())
    
    apply_volume_btn.click(
        apply_volume_from_slider,
        inputs=[session_dropdown, volume_control_slider],
        outputs=[session_info, volume_control_slider, mute_control_btn, unmute_control_btn, apply_volume_btn, sessions_table, session_stats]
    )
    
    def mute_selected_app(session_name):
        if not session_name or session_name == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            empty_result = (
                "<p style='color: gray;'>„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>",
                gr.update(visible=False), gr.update(visible=False), 
                gr.update(visible=False), gr.update(visible=False)
            )
            return empty_result + (app.get_sessions_table(), app.get_session_stats())
        
        app_name = session_name.split(" (PID:")[0]
        app.mute_app(app_name)
        
        # Ë©≥Á¥∞„Å®„ÉÜ„Éº„Éñ„É´„ÇíÂÜçÂèñÂæó„Åó„Å¶Êõ¥Êñ∞
        details_result = app.get_session_details_html(session_name)
        return details_result + (app.get_sessions_table(), app.get_session_stats())
    
    mute_control_btn.click(
        mute_selected_app,
        inputs=session_dropdown,
        outputs=[session_info, volume_control_slider, mute_control_btn, unmute_control_btn, apply_volume_btn, sessions_table, session_stats]
    )
    
    def unmute_selected_app(session_name):
        if not session_name or session_name == "Èü≥Â£∞„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì":
            empty_result = (
                "<p style='color: gray;'>„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>",
                gr.update(visible=False), gr.update(visible=False), 
                gr.update(visible=False), gr.update(visible=False)
            )
            return empty_result + (app.get_sessions_table(), app.get_session_stats())
        
        app_name = session_name.split(" (PID:")[0]
        app.unmute_app(app_name)
        
        # Ë©≥Á¥∞„Å®„ÉÜ„Éº„Éñ„É´„ÇíÂÜçÂèñÂæó„Åó„Å¶Êõ¥Êñ∞
        details_result = app.get_session_details_html(session_name)
        return details_result + (app.get_sessions_table(), app.get_session_stats())
    
    unmute_control_btn.click(
        unmute_selected_app,
        inputs=session_dropdown,
        outputs=[session_info, volume_control_slider, mute_control_btn, unmute_control_btn, apply_volume_btn, sessions_table, session_stats]
    )
    
    # Èå≤Èü≥
    system_record_btn.click(
        on_system_record,
        inputs=system_duration,
        outputs=[record_status, audio_output]
    )
    process_record_btn.click(
        on_process_record,
        inputs=[process_dropdown, process_duration],
        outputs=[record_status, audio_output]
    )
    callback_record_btn.click(
        on_callback_record,
        inputs=[callback_duration, enable_monitoring],
        outputs=[record_status, audio_output, monitoring_output]
    )
    stop_btn.click(
        on_stop_recording,
        outputs=[record_status, audio_output]
    )
    
    # „É¢„Éã„Çø„É™„É≥„Ç∞Êõ¥Êñ∞Ôºà„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈå≤Èü≥ÊôÇ„ÅÆ„Åø„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÔºâ
    # Gradio 5ÂØæÂøú: Timer „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí‰ΩøÁî®„Åó„Å¶ÂÆöÊúüÊõ¥Êñ∞„ÇíÂÆüË£Ö
    
    
    # Èü≥ÈáèÂà∂Âæ°
    set_volume_btn.click(
        app.set_app_volume,
        inputs=[volume_app_dropdown, volume_slider],
        outputs=volume_status
    )
    get_volume_btn.click(
        app.get_app_volume,
        inputs=volume_app_dropdown,
        outputs=volume_status
    )
    adjust_volume_btn.click(
        app.adjust_app_volume,
        inputs=[volume_app_dropdown, delta_slider],
        outputs=volume_status
    )
    mute_btn.click(
        app.mute_app,
        inputs=volume_app_dropdown,
        outputs=volume_status
    )
    unmute_btn.click(
        app.unmute_app,
        inputs=volume_app_dropdown,
        outputs=volume_status
    )
    
    # Process Loopback
    test_process_btn.click(
        test_process_loopback,
        inputs=[loopback_process, loopback_duration],
        outputs=[loopback_status, loopback_audio]
    )
    test_pid_btn.click(
        test_pid_loopback,
        inputs=[loopback_process, loopback_duration],
        outputs=[loopback_status, loopback_audio]
    )
    
    # È´òÂ∫¶„Å™Ê©üËÉΩ„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
    def test_record_to_file(duration, filename):
        """record_to_file() Èñ¢Êï∞„ÅÆ„ÉÜ„Çπ„Éà"""
        try:
            if not filename:
                filename = "direct_recording.wav"
            
            filepath = str(app.recordings_dir / filename)
            success = pypac.record_to_file(filepath, duration)
            
            if success and os.path.exists(filepath):
                size = os.path.getsize(filepath) / 1024
                return f"[OK] record_to_file() ÊàêÂäü\n„Éï„Ç°„Ç§„É´: {filename}\n„Çµ„Ç§„Ç∫: {size:.1f} KB"
            else:
                return "[FAIL] record_to_file() Â§±Êïó"
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def test_session_manager():
        """SessionManager „ÇØ„É©„Çπ„ÅÆÁõ¥Êé•‰ΩøÁî®"""
        try:
            from pypac import SessionManager
            
            manager = SessionManager()
            sessions = manager.list_sessions()
            
            output = f"SessionManager „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàêÊàêÂäü\n"
            output += f"„Çª„ÉÉ„Ç∑„Éß„É≥Êï∞: {len(sessions)}\n\n"
            
            if sessions:
                session = sessions[0]
                output += f"ÊúÄÂàù„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥:\n"
                output += f"- „Éó„É≠„Çª„Çπ: {session.process_name}\n"
                output += f"- PID: {session.process_id}\n"
                output += f"- Èü≥Èáè: {session.volume * 100:.0f}%\n"
                output += f"- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ: {session.is_active}"
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def test_audio_recorder():
        """AudioRecorder „ÇØ„É©„Çπ„ÅÆÁõ¥Êé•‰ΩøÁî®"""
        try:
            from pypac import AudioRecorder
            
            recorder = AudioRecorder()
            output = "AudioRecorder „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàêÊàêÂäü\n"
            output += f"„Çµ„É≥„Éó„É´„É¨„Éº„Éà: {recorder.sample_rate} Hz\n"
            output += f"„ÉÅ„É£„É≥„Éç„É´Êï∞: {recorder.channels}\n"
            output += f"Èå≤Èü≥‰∏≠: {recorder.is_recording}\n\n"
            
            # Áü≠„ÅÑÈå≤Èü≥„ÉÜ„Çπ„Éà
            output += "1Áßí„ÅÆÈå≤Èü≥„ÉÜ„Çπ„ÉàÂÆüË°å‰∏≠..."
            audio_data = recorder.record(1)
            output += f"\nÈå≤Èü≥„Çµ„É≥„Éó„É´Êï∞: {len(audio_data)}"
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def test_deprecated_apis():
        """ÈùûÊé®Â•®API„ÅÆ„ÉÜ„Çπ„Éà"""
        try:
            output = "ÈùûÊé®Â•®API „ÅÆ„ÉÜ„Çπ„Éà:\n\n"
            
            # find_app (deprecated)
            result = pypac.find_app("firefox")
            output += f"find_app('firefox'): {'Found' if result else 'Not found'}\n"
            
            # get_active_apps (deprecated)
            apps = pypac.get_active_apps()
            output += f"get_active_apps(): {len(apps)} „Ç¢„Éó„É™Ê§úÂá∫"
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def load_wav_file(file):
        """WAV„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø"""
        if not file:
            return "„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        
        try:
            audio_data, sample_rate, channels = pypac.utils.load_wav(file.name)
            
            output = f"load_wav() ÊàêÂäü:\n"
            output += f"„Çµ„É≥„Éó„É´Êï∞: {len(audio_data)}\n"
            output += f"„Çµ„É≥„Éó„É´„É¨„Éº„Éà: {sample_rate} Hz\n"
            output += f"„ÉÅ„É£„É≥„Éç„É´Êï∞: {channels}"
            
            # „Çª„ÉÉ„Ç∑„Éß„É≥Â§âÊï∞„Å´‰øùÂ≠òÔºàÂæå„ÅÆËß£ÊûêÁî®Ôºâ
            app.loaded_audio_data = audio_data
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def calculate_rms():
        """RMSË®àÁÆó"""
        try:
            if not hasattr(app, 'loaded_audio_data'):
                # „Éá„É¢Áî®„ÅÆ„Çµ„É≥„Éó„É´„Éá„Éº„ÇøÁîüÊàê
                import numpy as np
                app.loaded_audio_data = np.sin(np.linspace(0, 2*np.pi, 48000)).tolist()
            
            rms = pypac.utils.calculate_rms(app.loaded_audio_data)
            return f"calculate_rms() ÁµêÊûú:\nRMSÂÄ§: {rms:.6f}"
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def calculate_db():
        """dBË®àÁÆó"""
        try:
            if not hasattr(app, 'loaded_audio_data'):
                # „Éá„É¢Áî®„ÅÆ„Çµ„É≥„Éó„É´„Éá„Éº„ÇøÁîüÊàê
                import numpy as np
                app.loaded_audio_data = (np.sin(np.linspace(0, 2*np.pi, 48000)) * 0.5).tolist()
            
            db = pypac.utils.calculate_db(app.loaded_audio_data)
            return f"calculate_db() ÁµêÊûú:\nÈü≥Èáè„É¨„Éô„É´: {db:.1f} dB"
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def normalize_audio():
        """Èü≥Â£∞Ê≠£Ë¶èÂåñ"""
        try:
            if not hasattr(app, 'loaded_audio_data'):
                # „Éá„É¢Áî®„ÅÆ„Çµ„É≥„Éó„É´„Éá„Éº„ÇøÁîüÊàê
                import numpy as np
                app.loaded_audio_data = (np.sin(np.linspace(0, 2*np.pi, 48000)) * 0.3).tolist()
            
            original_max = max(abs(min(app.loaded_audio_data)), max(app.loaded_audio_data))
            normalized = pypac.utils.normalize_audio(app.loaded_audio_data, 0.9)
            new_max = max(abs(min(normalized)), max(normalized))
            
            output = f"normalize_audio() ÁµêÊûú:\n"
            output += f"ÂÖÉ„ÅÆÊúÄÂ§ßÂÄ§: {original_max:.3f}\n"
            output += f"Ê≠£Ë¶èÂåñÂæå„ÅÆÊúÄÂ§ßÂÄ§: {new_max:.3f}\n"
            output += f"„Çµ„É≥„Éó„É´Êï∞: {len(normalized)}"
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    def convert_format_demo():
        """„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ„Éá„É¢"""
        try:
            # „Éá„É¢Áî®„ÅÆfloat32„Éá„Éº„Çø
            float_data = [0.0, 0.5, 1.0, -0.5, -1.0]
            int_data = pypac.utils.convert_float32_to_int16(float_data)
            
            output = "convert_float32_to_int16() „Éá„É¢:\n\n"
            output += "Float32 ‚Üí Int16:\n"
            for f, i in zip(float_data, int_data):
                output += f"  {f:6.2f} ‚Üí {i:6d}\n"
            
            return output
        except Exception as e:
            return f"„Ç®„É©„Éº: {str(e)}"
    
    # È´òÂ∫¶„Å™Ê©üËÉΩ„ÅÆ„Ç§„Éô„É≥„Éà„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞
    direct_record_btn.click(
        test_record_to_file,
        inputs=[direct_duration, direct_filename],
        outputs=direct_status
    )
    
    use_session_manager_btn.click(
        test_session_manager,
        outputs=session_manager_output
    )
    
    use_audio_recorder_btn.click(
        test_audio_recorder,
        outputs=audio_recorder_output
    )
    
    test_deprecated_btn.click(
        test_deprecated_apis,
        outputs=deprecated_output
    )
    
    load_wav_btn.click(
        load_wav_file,
        inputs=wav_file_input,
        outputs=load_wav_output
    )
    
    calc_rms_btn.click(
        calculate_rms,
        outputs=analysis_output
    )
    
    calc_db_btn.click(
        calculate_db,
        outputs=analysis_output
    )
    
    normalize_btn.click(
        normalize_audio,
        outputs=analysis_output
    )
    
    convert_btn.click(
        convert_format_demo,
        outputs=convert_output
    )
    
    # ÂàùÊúüÂåñÊôÇ„Å´„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
    demo.load(refresh_sessions, outputs=[
        session_dropdown, volume_app_dropdown, process_dropdown,
        loopback_process, recordings_list
    ])

if __name__ == "__main__":
    print("PyPAC ÂÆåÂÖ®Ê©üËÉΩ„Éá„É¢„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíËµ∑Âãï‰∏≠...")
    print("„Éñ„É©„Ç¶„Ç∂„Åß http://localhost:7860 „ÇíÈñã„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ")
    demo.launch(share=False, inbrowser=True)