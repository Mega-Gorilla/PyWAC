Metadata-Version: 2.4
Name: pypac
Version: 0.2.0
Summary: Python Process Audio Capture for Windows - High-level audio control library
Home-page: https://github.com/yourusername/pypac
Author: PyPAC Contributors
Author-email: 
Maintainer: PyPAC Contributors
License: MIT
Project-URL: Homepage, https://github.com/yourusername/pypac
Project-URL: Documentation, https://github.com/yourusername/pypac#readme
Project-URL: Repository, https://github.com/yourusername/pypac.git
Project-URL: Bug Reports, https://github.com/yourusername/pypac/issues
Project-URL: Changelog, https://github.com/yourusername/pypac/blob/main/CHANGELOG.md
Keywords: audio,windows,wasapi,recording,capture,volume,process,loopback
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Multimedia :: Sound/Audio :: Capture/Recording
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: C++
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: Microsoft :: Windows :: Windows 10
Classifier: Operating System :: Microsoft :: Windows :: Windows 11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.19.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: pylint>=2.0; extra == "dev"
Requires-Dist: mypy>=0.900; extra == "dev"
Requires-Dist: sphinx>=4.0; extra == "dev"
Requires-Dist: twine>=3.0; extra == "dev"
Requires-Dist: build>=0.7; extra == "dev"
Provides-Extra: examples
Requires-Dist: psutil>=5.0; extra == "examples"
Provides-Extra: test
Requires-Dist: pytest>=6.0; extra == "test"
Requires-Dist: pytest-cov>=2.0; extra == "test"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.0; extra == "docs"
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# PyPAC - Python Process Audio Capture for Windows

[![Python Version](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/)
[![Windows](https://img.shields.io/badge/platform-Windows%2010%2F11-blue.svg)](https://www.microsoft.com/windows)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)

Windows向けのプロセス単位オーディオキャプチャライブラリ

[English](README.en.md) | **日本語**

## 🎯 概要

PyPACは、Windowsでプロセス単位のオーディオキャプチャを実現するPython拡張モジュールです。Windows Audio Session APIを使用して、特定のアプリケーションからの音声を分離してキャプチャすることを目指しています。

### なぜPyPACが必要か？

- **問題**: 既存のPythonオーディオライブラリ（PyAudioWPatch、sounddevice等）はシステム全体の音声しかキャプチャできません
- **解決**: アプリケーション単位で音声を分離し、不要な音声の混入を防ぎます
- **用途**: ゲーム配信での音声分離、特定アプリの録音、音声解析など

## ✨ 主な機能

| 機能 | 状態 | 説明 |
|------|------|------|
| オーディオセッション列挙 | ✅ 実装済 | 実行中アプリのオーディオセッションを検出 |
| プロセス情報取得 | ✅ 実装済 | プロセス名、PID、音量、ミュート状態を取得 |
| システムループバック | ✅ 実装済 | システム全体のオーディオをキャプチャ |
| ボリューム制御 | ✅ 実装済 | 特定プロセスの音量調整 |
| プロセス固有キャプチャ | 🚧 開発中 | Windows 11 24H2で制限あり |

## 🏗️ アーキテクチャ

```
pypac/
├── audio_session_capture     # メインモジュール
│   ├── SessionEnumerator    # セッション管理クラス
│   └── SimpleLoopback       # システム録音クラス
└── process_loopback         # レガシーAPI (参考実装)
```

### 技術スタック
- **C++17**: コア実装
- **Windows Audio Session API**: オーディオセッション管理
- **WASAPI**: Windows Audio Session API Interface
- **pybind11**: Python バインディング

## 📦 インストール

### 前提条件

| 要件 | バージョン |
|------|-----------|
| Windows | 10 (2004+) / 11 |
| Python | 3.7以上 |
| Visual Studio | 2022 (C++開発ツール) |
| Windows SDK | 10.0.26100.0以降 |

### セットアップ手順

```powershell
# 1. リポジトリをクローン
git clone https://github.com/yourusername/pypac.git
cd pypac

# 2. 仮想環境を作成・有効化
python -m venv .venv
.\.venv\Scripts\Activate.ps1

# 3. 依存関係をインストール
pip install pybind11 numpy

# 4. ビルド
python setup.py build_ext --inplace

# 5. 確認
python examples/demo_audio_capture.py
```

## 🚀 クイックスタート

### 基本的な使用例

```python
import pypac
import numpy as np

# オーディオセッションの列挙
enumerator = pypac.SessionEnumerator()
sessions = enumerator.enumerate_sessions()

for session in sessions:
    if session.state == 1:  # アクティブ
        print(f"🔊 {session.process_name} (PID: {session.process_id})")
        print(f"   音量: {session.volume:.0%}")
        print(f"   ミュート: {'Yes' if session.muted else 'No'}")

# システム全体の録音
loopback = pypac.SimpleLoopback()
if loopback.start():
    import time
    time.sleep(3)  # 3秒間録音
    
    audio_data = loopback.get_buffer()
    print(f"録音完了: {len(audio_data)} サンプル")
    
    loopback.stop()
```

## 📖 API リファレンス

### SessionEnumerator クラス

| メソッド | 説明 | 戻り値 |
|---------|------|--------|
| `enumerate_sessions()` | 全オーディオセッションを取得 | `List[SessionInfo]` |
| `set_session_volume(pid, volume)` | プロセスの音量を設定 (0.0-1.0) | `bool` |
| `set_session_mute(pid, mute)` | プロセスのミュート状態を設定 | `bool` |

### SessionInfo 構造体

| プロパティ | 型 | 説明 |
|-----------|-----|------|
| `process_name` | `str` | プロセス名 |
| `process_id` | `int` | プロセスID |
| `state` | `int` | 0:非アクティブ, 1:アクティブ, 2:期限切れ |
| `volume` | `float` | 音量レベル (0.0-1.0) |
| `muted` | `bool` | ミュート状態 |

### SimpleLoopback クラス

| メソッド | 説明 | 戻り値 |
|---------|------|--------|
| `start()` | キャプチャ開始 | `bool` (成功/失敗) |
| `stop()` | キャプチャ停止 | `None` |
| `get_buffer()` | オーディオデータ取得 | `numpy.ndarray[float32]` |

## 💡 実践的な使用例

### 特定アプリケーションの音量調整

```python
def adjust_app_volume(app_name: str, volume_percent: int) -> bool:
    """特定アプリケーションの音量を調整"""
    enumerator = pypac.SessionEnumerator()
    sessions = enumerator.enumerate_sessions()
    
    for session in sessions:
        if app_name.lower() in session.process_name.lower():
            success = enumerator.set_session_volume(
                session.process_id, 
                volume_percent / 100.0
            )
            if success:
                print(f"✅ {session.process_name}の音量を{volume_percent}%に設定")
                return True
    
    print(f"❌ {app_name}が見つかりません")
    return False

# 使用例
adjust_app_volume("Discord", 50)  # Discordを50%に
adjust_app_volume("chrome", 80)   # Chromeを80%に
```

### オーディオレベルメーター

```python
def show_audio_meter(duration_seconds: int = 10):
    """リアルタイムオーディオレベルメーター"""
    loopback = pypac.SimpleLoopback()
    
    if not loopback.start():
        print("❌ キャプチャを開始できません")
        return
    
    print("🎵 オーディオレベルメーター (Ctrl+Cで終了)")
    print("-" * 50)
    
    import time
    for i in range(duration_seconds):
        time.sleep(1)
        buffer = loopback.get_buffer()
        
        if len(buffer) > 0:
            # RMS計算
            rms = np.sqrt(np.mean(buffer**2))
            db = 20 * np.log10(rms + 1e-10)
            
            # ビジュアライズ
            meter_width = 40
            normalized = min(1.0, max(0.0, (db + 60) / 60))
            filled = int(normalized * meter_width)
            meter = "█" * filled + "░" * (meter_width - filled)
            
            print(f"\r[{meter}] {db:+6.1f} dB", end="")
    
    loopback.stop()
    print("\n✅ 録音完了")
```

## 🔧 トラブルシューティング

### よくある問題と解決方法

| 問題 | 原因 | 解決方法 |
|------|------|----------|
| `ImportError: DLL load failed` | Visual C++再頒布可能パッケージ不足 | [VC++ Redistributable](https://aka.ms/vs/17/release/vc_redist.x64.exe)をインストール |
| オーディオが録音されない | 管理者権限が必要 | PowerShellを管理者として実行 |
| セッションが表示されない | アプリが音声を出力していない | 対象アプリで音声を再生 |
| ビルドエラー `error C2039` | Windows SDKバージョン不一致 | Visual Studio Installerで最新SDKをインストール |

### デバッグ方法

```python
# 詳細ログを有効化
import logging
logging.basicConfig(level=logging.DEBUG)

# COM初期化の確認
import ctypes
hr = ctypes.windll.ole32.CoInitializeEx(None, 0x0)
print(f"COM初期化: 0x{hr:08X}")
```

## 🔄 既知の制限事項

### Windows 11 24H2での問題
- **Process Loopback API**が正常に動作しません（ヒープ破損エラー 0xc0000374）
- 代替手段として**Audio Session API**を使用しています
- プロセス固有のキャプチャは現在開発中です

### パフォーマンス仕様
| 項目 | 値 |
|------|-----|
| バッファサイズ | 480サンプル (10ms @ 48kHz) |
| サンプリングレート | 48,000 Hz |
| ビット深度 | 32-bit float |
| レイテンシ | 約10-20ms |
| CPU使用率 | 通常1-3% |

## 🤝 コントリビューション

プルリクエストを歓迎します！

1. このリポジトリをフォーク
2. フィーチャーブランチを作成 (`git checkout -b feature/AmazingFeature`)
3. 変更をコミット (`git commit -m 'Add some AmazingFeature'`)
4. ブランチにプッシュ (`git push origin feature/AmazingFeature`)
5. プルリクエストを作成

### 開発環境

```powershell
# 開発モードでインストール
pip install -e .

# テスト実行
python -m pytest tests/

# コード品質チェック
python -m pylint src/
python -m black src/
```

## 📚 関連リソース

- [Windows Audio Session API (WASAPI)](https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi)
- [Core Audio APIs](https://docs.microsoft.com/en-us/windows/win32/coreaudio/core-audio-apis-in-windows-vista)
- [pybind11 Documentation](https://pybind11.readthedocs.io/)
- [OBS Studio win-capture-audio](https://github.com/bozbez/win-capture-audio) - 実装の参考

## 📄 ライセンス

このプロジェクトはMITライセンスの下で公開されています。詳細は[LICENSE](LICENSE)ファイルを参照してください。

## 🙏 謝辞

- [OBS Studio](https://obsproject.com/) - win-capture-audioの実装アプローチ
- [pybind11](https://github.com/pybind/pybind11) - 優れたC++/Pythonバインディング
- Windows Audio APIチーム - 詳細なドキュメントとサンプル

## 📝 更新履歴

### v0.2.0 (2024-01-XX)
- 🎉 Audio Session APIへの完全移行
- 🐛 Windows 11 24H2での安定性向上
- 📁 プロジェクト構造の改善
- 📚 包括的なドキュメント追加

### v0.1.0 (2024-01-XX)
- 🚀 初期リリース
- 🔬 Process Loopback API実装（実験的）
- 🎵 基本的なオーディオキャプチャ機能

---

<div align="center">

**[⬆ トップに戻る](#pypac---python-process-audio-capture-for-windows)**

Made with ❤️ for Windows Audio Development

</div>
